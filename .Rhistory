barplot(mpg, col = brewer.pal(5,"BrBG")) # BrBG applied to our barplot
barplot(mpg, col = brewer.pal(5,"Set2")) # Set2 applied to our barplot
```
head(mtcars) # Reminder of the data we have
cyl.table <- table(mtcars$cyl) # Create a summary table of the cyl variable in mtcars
cyl.table # Check results
barplot(cyl.table) # Not fancy, but there are many, many other options...
# ?barplot
barplot(cyl.table, width = 1,
space = NULL,
names.arg = NULL,
legend.text = NULL,
beside = FALSE,
horiz = FALSE,
density = NULL,
angle = 45,
col = NULL,
border = par("fg"),
main = NULL,
sub = NULL,
xlab = NULL, ylab = NULL,
xlim = NULL, ylim = NULL,
xpd = TRUE,
log = "",
axes = TRUE,
axisnames = TRUE,
cex.axis = par("cex.axis"),
cex.names = par("cex.axis"),
plot = TRUE,
axis.lty = 0,
offset = 0,
add = FALSE,
args.legend = NULL)
# Note that you can split functions across lines and comment specific parts separately
barplot(cyl.table,
# density = c(20, 5, -1), # Hatched fill, negative means no hatching
space = 1.5, # Spaces between bars
horiz = TRUE, # Flip them bars
las = 1,  # Orientation of axis labels
ylab = "Number of Cylinders",
col = brewer.pal(3,"Set1"),
border = NA,  # Remove border on bars
main = "Engine Cylinder Counts",  # Title
xlab = "Number of Cars with Cylinder Type")
# par() # This will list the current settings
par()
o.par <- par(no.readonly = T) # Store current setting in new variable, but not read only ones
par(mar = c(6,6,6,2)) # Set new margins, (bottom, left, top, right)
# Plot the same thing, but notice the left axis label
barplot(cyl.table,
space = 1.5, # Spaces between bars
horiz = TRUE, # Flip them bars
las = 1,  # Orientation of axis labels
ylab = "Number of Cylinders",
col = brewer.pal(3,"Set1"),
border = NA,  # Remove border on bars
main = "Engine Cylinder Counts",  # Title
xlab = "Number of Cars with Cylinder Type")
par(col.axis="gray60", font.axis = 2) # Set axis font to gray60, and bold text
barplot(cyl.table,
space = 1.5, # Spaces between bars
horiz = TRUE, # Flip them bars
las = 1,  # Orientation of axis labels
ylab = "Number of Cylinders",
col = brewer.pal(3,"Set1"),
border = NA,  # Remove border on bars
main = "Engine Cylinder Counts",  # Title
xlab = "Number of Cars with Cylinder Type")
par(o.par) # Restore defaults
par(mar = c(6,6,6,2), col.axis="gray60", font.axis = 2) # All the stuff we did before
#Let's make a plot without an axis at the bottom or a title.
barplot(cyl.table,
xaxt ="n", # Supress x axis. yaxt for y, axes = FALSE does both
space = 1.5, # Spaces between bars
las = 1,
horiz = TRUE, # Flip them bars
ylab = "Number of Cylinders",
col = brewer.pal(3,"Set1"),
border = NA,  # Remove border on bars
xlab = "Number of Cars with Cylinder Type")
# 1=bottom, 2=left, 3=top, 4=right
axis(1, col = "gray50", lty = 3) # 1 indicates position, lty is line type
title(main ="Engine Cylinder Counts",
col.main = "paleturquoise4", # Set color of main title
cex.main = 2, # Set relative size of title
sub = "Aw yeah this is a dope subtitle", # Subtitle
col.sub = "gray60")
# Title also contains options for axis labels
title(ylab = "More Y Label for some reason",
line = 2, # Change position in terms of text lines
col.lab = "red")
par(o.par) # Rest par() to original
hist(mtcars$qsec,
main="Distribution of Time to Quarter-mile",
xlab="Time (Seconds)",
xlim = c(14,24), # Force x axis limits
col= rev(brewer.pal(9, "Spectral")) ) # Same number of colors; really chartjunk
abline(v = mean(mtcars$qsec), lty = 2, col = "turquoise4") # Create a line at average qsec
text(18.7, 9, labels ="Mean", col = "turquoise4") # Create a text label at specific x, y
lines(density(mtcars$qsec), col = "darkred", lwd = 2) # Kernel density line
# We can also alter the amount of breaks
hist(mtcars$qsec,
breaks = 5, # Set number of breaks
main="Distribution of Time to Quarter-mile",
xlab="Time (Seconds)",
col= "gray80" )
abline(v=mean(mtcars$qsec), lty = 2, col = "turquoise4") # Create a line at average qsec
text(18.7, 12, labels ="Mean", col = "turquoise4") # Note the different x, y
lines(density(mtcars$qsec), col = "darkred", lwd = 2) # Kernel density line
boxplot(mtcars$qsec, ylab = "Time to Quarter Mile") # All cars qsex
four.qsec <- mtcars$qsec[mtcars$cyl == 4] # qsec for rows where cyl = 4
six.qsec <- mtcars$qsec[mtcars$cyl == 6] # qsec for rows where cyl = 6
eight.qsec <- mtcars$qsec[mtcars$cyl == 8] # qsec for rows where cyl = 8
eight.qsec # Check results
boxplot(four.qsec, six.qsec, eight.qsec) # Wow! Graphs! but not labelled, and not pretty.
# Now to make it real
boxplot(four.qsec, six.qsec, eight.qsec, # Data
ylim = c(14,24), # Set Y axis limits manually
xaxt = "n",
# names = c("Four","Six", "Eight"), # Need to provide names since our var are simple arrays
col = brewer.pal(3, "Set2"),   # Tasteful colors for boxes
boxwex = 0.5,  # Width of box (as proportion of original)
whisklty = 1,  # Whisker line type; 1 = solid line
staplelty = 0,  # Staple (line at end) type, 0 is none
outpch = 16,  # Symbols for outliers
outcol =  brewer.pal(3, "Set2"), # Colors for outliers
main = "Quarter Mile Time and Engine Type",
col.main = "gray40", # Color of title
ylab = "Time in Seconds",
frame.plot = FALSE # Take away the whole frame
)
# Create a legend
legend("topright", # Location (can also be x, y)
legend = c("Four","Six", "Eight"), # Labels
fill = brewer.pal(3, "Set2"), # Same colors as above
bty = "n", # Remove box around legend
title = "Number of Cylinders",
title.col = "gray40",
text.font = 3, # Italic
cex = 1.2) # Make a little bigger
abline(h = mean(mtcars$qsec), lty = 2, col = "gray50") # Line for global mean
plot(mtcars$hp, mtcars$mpg) # Simple example, two variables in same table
# Points symbol types can be changed with pch options
plot(mtcars$hp, mtcars$mpg, pch = 18) # Diamond points
plot(mtcars$hp, mtcars$mpg, pch = 13) # This disgusting things. What are they?
mtcars$cyl.2 <- as.factor(mtcars$cyl) # Create a new field so we can use unclass()
mtcars$cyl.2 # Check results, note it has "levels"
# This essentially assigns color per category
# c("#00008B96", "#00640096", "#8B000096")[unclass(mtcars$cyl.2)]
plot(mtcars$hp, mtcars$mpg,
pch= c(15, 16, 17)[unclass(mtcars$cyl.2)], # Change type of point
col = c("#00008B96", "#00640096", "#8B000096")[unclass(mtcars$cyl.2)], #Semi-transparent colors, assigned per cyl.2 type
main ="Horsepower versus Fuel Efficiency",
col.main = "steelblue",
cex.main = 1.5, # Increase size
xlab = "Horsepower", # x label
ylab = "Miles per Gallon", # y label
font.lab = 2 # make bold
)
legend("topright", # Location (can also be x, y)
legend = c("Four","Six", "Eight"), # Labels
col = c("#00008B96", "#00640096", "#8B000096"), # Same colors as above
pch = c(15, 16, 17),
bty = "n", # Remove box around legend
title = "Number of Cylinders",
title.col = "gray40",
cex = 1) # Make a little bigger
plot(six.qsec,
type ="o", # Type can specify particular types of graph to force
col = "blue",
pch = 18, # Set symbol to diamond
main = "Speed... over Index?"
)
# Add second line
lines(eight.qsec,
type = "o",
col = "red",
pch = 19,
lty =4)
# Add legenve
legend("topright",
legend = c("Six Cylinder", "Eight Cylinder"),
col = c("blue", "red"),
lty =c(1, 4) # Need to specify line type in order to force lines
)
pairs(mtcars[c(1,4,7)],
col.axis = "blue",
fg ="blue",
pch = c(15, 16, 17)[unclass(mtcars$cyl.2)],
col = c("#00008B96", "#00640096", "#8B000096")[unclass(mtcars$cyl.2)]
)
png(filename= "Neat.png")  # "Open device""
plot(mtcars$hp, mtcars$mpg,
pch= 19, # Change type of point
col = c("#00008B96", "#00640096", "#8B000096")[unclass(mtcars$cyl.2)], #Semi-transp. colors, assigned per cyl.2 type
main ="Horsepower versus Fuel Efficiency",
col.main = "steelblue",
cex.main = 1.5, # Increase size
xlab = "Horsepower", # x label
ylab = "Miles per Gallon", # y label
font.lab = 2 # make bold
)
dev.off()  # Close "device" (end writing)
# install.packages("ggplot2")
rm(mpg) # Remove variable since it has conflicting name
library(ggplot2)
# Quickest plot
qplot(mpg, data = mtcars) # Assumes histogram, note tip in console
# Can get real fancy, real fast
qplot(mpg, # This is our variable (Column)
data = mtcars, # This is our dataset
geom = "histogram", # Type of geometry (type of plot)
binwidth = 5, # Number of bins
fill = cyl.2, # Variable setting fill, categorical
alpha = I(.5), # Alpha transparency
main = "Distribution of Time to Quarter-mile",
xlab = "Time (seconds)",
ylab = "Density"
)
# Boxplot
qplot(cyl.2, qsec, # Set x and y.
data = mtcars, # Our dataframe, so x and why can reference
geom = c("boxplot"),
fill = cyl.2, # Since this is a factor, it assumes categorical
main = "Speed and Cylinders",
xlab = "", # Empty
ylab = "Time to Quarter Mile (sec)"
)
############# Scatterplot repeated from above
plot(mtcars$hp, mtcars$mpg,
pch= 19, # Change type of point
col = c("#00008B96", "#00640096", "#8B000096")[unclass(mtcars$cyl.2)], #Semi-transparent colors, assigned per cyl.2 type
main ="Horsepower versus Fuel Efficiency",
col.main = "steelblue",
cex.main = 1.5, # Increase size
xlab = "Horsepower", # x label
ylab = "Miles per Gallon", # y label
font.lab = 2 # make bold
)
legend("topright", # Location (can also be x, y)
legend = c("Four","Six", "Eight"), # Labels
col = c("#00008B96", "#00640096", "#8B000096"), # Same colors as above
pch = 19,
bty = "n", # Remove box around legend
title = "Number of Cylinders",
title.col = "gray40",
cex = 1) # Make a little bigger
#############
# qqplot Scatterplot
qplot(hp, mpg,
data = mtcars,
shape = cyl.2, # Varies with categorical variable (factor)
color = cyl.2, # Varies with categorical variable (factor)
size=I(3), # I is relative to default (so *3 here)
main ="Horsepower versus Fuel Efficiency",
xlab="Horsepower",
ylab="Miles per Gallon"
)
# Create canvas based off our data, then add histogram
ggplot(NULL, aes(x = mtcars$qsec)) +
geom_histogram() # Create the graphic (with data from above)
ggplot(NULL, aes(x = mtcars$qsec)) +
geom_histogram(fill = "white", color = "black") + # Simple aesthetics
geom_density(color = "blue") +
geom_area(stat = "bin", alpha = .1, fill = "blue")
#Scatterplot
ggplot(mtcars, aes(x = hp, y = mpg, # x and y
shape = cyl.2, # Change shape according to cyl.2
color = cyl.2)) + # Change color according to cyl.2
geom_point(size = 3) + # Create points
geom_rug () + # Rug plot
geom_smooth(alpha = .2) # regressiony
#Boxplot equivalent to one above
ggplot(mtcars, aes( x = cyl.2, y = qsec)) +
geom_boxplot(aes(fill = cyl.2)) + # Create boxplot, fill by cyl.2
ylab("Time to Quarter Mile (sec)")+
xlab("")+
scale_fill_discrete(name = "Cylinders") + # Legend label
ggtitle("Speed and Cylinders")
```
# Create canvas based off our data, then add histogram
ggplot(NULL, aes(x = mtcars$qsec)) +
geom_histogram() # Create the graphic (with data from above)
ggplot(NULL, aes(x = mtcars$qsec)) +
geom_histogram(fill = "white", color = "black") + # Simple aesthetics
geom_density(color = "blue") +
geom_area(stat = "bin", alpha = .1, fill = "blue")
#Scatterplot
ggplot(mtcars, aes(x = hp, y = mpg, # x and y
shape = cyl.2, # Change shape according to cyl.2
color = cyl.2)) + # Change color according to cyl.2
geom_point(size = 3) + # Create points
geom_rug () + # Rug plot
geom_smooth(alpha = .2) # regressiony
#Boxplot equivalent to one above
ggplot(mtcars, aes( x = cyl.2, y = qsec)) +
geom_boxplot(aes(fill = cyl.2)) + # Create boxplot, fill by cyl.2
ylab("Time to Quarter Mile (sec)")+
xlab("")+
scale_fill_discrete(name = "Cylinders") + # Legend label
ggtitle("Speed and Cylinders")
```
# Create canvas based off our data, then add histogram
ggplot(NULL, aes(x = mtcars$qsec)) +
geom_histogram() # Create the graphic (with data from above)
ggplot(NULL, aes(x = mtcars$qsec)) +
geom_histogram(fill = "white", color = "black") + # Simple aesthetics
geom_density(color = "blue") +
geom_area(stat = "bin", alpha = .1, fill = "blue")
#Scatterplot
ggplot(mtcars, aes(x = hp, y = mpg, # x and y
shape = cyl.2, # Change shape according to cyl.2
color = cyl.2)) + # Change color according to cyl.2
geom_point(size = 3) + # Create points
geom_rug () + # Rug plot
geom_smooth(alpha = .2) # regressiony
#Boxplot equivalent to one above
ggplot(mtcars, aes( x = cyl.2, y = qsec)) +
geom_boxplot(aes(fill = cyl.2)) + # Create boxplot, fill by cyl.2
ylab("Time to Quarter Mile (sec)")+
xlab("")+
scale_fill_discrete(name = "Cylinders") + # Legend label
ggtitle("Speed and Cylinders")
```
# Create canvas based off our data, then add histogram
ggplot(NULL, aes(x = mtcars$qsec)) +
geom_histogram() # Create the graphic (with data from above)
ggplot(NULL, aes(x = mtcars$qsec)) +
geom_histogram(fill = "white", color = "black") + # Simple aesthetics
geom_density(color = "blue") +
geom_area(stat = "bin", alpha = .1, fill = "blue")
#Scatterplot
ggplot(mtcars, aes(x = hp, y = mpg, # x and y
shape = cyl.2, # Change shape according to cyl.2
color = cyl.2)) + # Change color according to cyl.2
geom_point(size = 3) + # Create points
geom_rug () + # Rug plot
geom_smooth(alpha = .2) # regressiony
#Boxplot equivalent to one above
ggplot(mtcars, aes( x = cyl.2, y = qsec)) +
geom_boxplot(aes(fill = cyl.2)) + # Create boxplot, fill by cyl.2
ylab("Time to Quarter Mile (sec)")+
xlab("")+
scale_fill_discrete(name = "Cylinders") + # Legend label
ggtitle("Speed and Cylinders")
```
rm(list= ls()) # Clear environment
# install.packages("GISTools")
# library(GISTools) # Note all the dependent packages loaded
library(GISTools, suppressPackageStartupMessages("True")) # Lead package without oodles of messages
data(newhaven) # Convenient collection of data
# head(data.frame(blocks)) # Look at our data again
colnames(data.frame(blocks)) # Just the attribute names
blocks$P_VACANT[1:5] # Can be treated like a dataframe... sometimes
# hist(blocks$P_VACANT) #Same for graphing
display.brewer.pal(5, "Blues")
# auto.shading builds off of color brewer to create classes
# Needs to be stored separately
shades.blue  <-  auto.shading(blocks$P_VACANT, cols = brewer.pal(7,'Blues')[3:7]) #Create a new color palette
shades.blue # Note class breaks
# ?auto.shading # Part of GIStools
choropleth(blocks,
v = blocks$P_VACANT, # Variable to be mapped
shading = shades.blue, # Shading object created above
bg = "gray30", # Background color
border = NA # No Border
)
plot(blocks,
add = TRUE,
col=NA,
border = add.alpha("#FFFFFF", .2) # partly transparent white
)
# choropleth maps attributes held in SpatialPolygons DataFrame (e.g., 'blocks')
choro.legend(px = 533000, py = 161000,
sh = shades.blue,
border = "#FFFFFF80", # Semitransparent white around boxes
bg = NA, # No background color,
bty = "n", # No outer box
text.col = "red", # Broken apparently
title.col = "white"
)
title(main = "Percent Vacant",
col.main = "gray20")
# Create new set of shades for Owner occupied percentage
shades.yell  <-  auto.shading(blocks$P_OWNEROCC,cols=brewer.pal(5,'YlOrRd')) #Create a new color palette
choropleth(blocks, blocks$P_OWNEROCC,
shading = shades.yell, # Shading object created above
bg = "gray30", # Background color
border = NA # No Border
)
plot(blocks,
add = TRUE,
col=NA,
border = add.alpha("#000000", .15) # partly transparent black
)
choro.legend(px = 533000, py = 161000,
sh = shades.yell,
border = NA,
bg = NA, # No background color,
bty = "n" # No outer box
)
# Add title
title(main = "Percent Owner Occupied",
col.main = "gray20")
o.par <- par(no.readonly = FALSE)
# Put them side by side, adjust margins
par(mfrow = c (1,2), mar = c(1,0,1,0)) # mar =bottom, left, top, right
# Vacant Map
choropleth(blocks, v = blocks$P_VACANT, shading = shades.blue, bg = "gray30", border = NA)
plot(blocks, add = TRUE, col = NA, border = add.alpha("#FFFFFF", .2))
choro.legend(px = 533000, py = 161000, sh = shades.blue, border = "#FFFFFF80", bg = NA, bty = "n", text.col = "red", title.col = "white")
title(main = "Percent Vacant", col.main = "white", line = -1)
# Owner Occupied Map
choropleth(blocks, blocks$P_OWNEROCC, shading = shades.yell, bg = "gray30", border = NA)
plot(blocks, add = TRUE, col=NA, border = "gray15" ) # Alpha not working on second plot??
choro.legend(px = 533000, py = 161000, sh = shades.yell, border = NA, bg = NA, bty = "n" )
title(main = "Percent Owner Occupied", col.main = "white", line = -1)
par(o.par)
head(breach) # Note: no underlying data
breach.dens  <-  kde.points(breach, lims = tracts) # Create kernel density values, to then convert to raster
class(breach.dens) # SpatialPixelDataFrame
head(data.frame(breach.dens)) # Note the kde values added
breach.dense.grid <- as(breach.dens, "SpatialGridDataFrame") # Use 'as' to coerce into SpatialGridDataFrame (raster)
head(data.frame(breach.dense.grid)) # look at data
image(breach.dense.grid, #Note the image() function for plotting
col = colorRampPalette(brewer.pal(9, "Reds"))(100)
)
# install.packages("rgdal") # Uncomment and install if needed
# Probably already loaded through GISTools
# library(rgdal)
suppressPackageStartupMessages(library(rgdal))
rm(list=ls()) # Clear workspace
# setwd() # Set working directory (or Session -> Set Working Directory -> To Source File Location)
# ?readOGR
# Note that this is one file level down, in State_Census_DP1, and that no file exension is used
murica <- readOGR(dsn = "./State_2010Census_DP1", layer = "State_2010Census_DP1")
# ?readOGR
# Note that this is one file level down, in State_Census_DP1, and that no file exension is used
murica <- readOGR(dsn = "./State_2010Census_DP1", layer = "State_2010Census_DP1")
library(rgdal)
library(rgdal)
suppressPackageStartupMessages(library(rgdal))
rm(list=ls()) # Clear workspace
#repeated for R markdown
image(breach.dense.grid, #Note the image() function for plotting
col = colorRampPalette(brewer.pal(9, "Reds"))(100)
)
#repeated for R markdown
image(breach.dense.grid, #Note the image() function for plotting
col = colorRampPalette(brewer.pal(9, "Reds"))(100)
)
#repeated for R markdown
image(breach.dense.grid, #Note the image() function for plotting
col = colorRampPalette(brewer.pal(9, "Reds"))(100)
)
#repeated for R markdown
image(breach.dense.grid, #Note the image() function for plotting
col = colorRampPalette(brewer.pal(9, "Reds"))(100)
)
pcaCars <- princomp(mtcars, cor = TRUE)
names(pcaCars)
summary(pcaCars)
plot(pcaCars, type = "l")
setwd(C:/Users/Zhaohu/Documents/GitHub/pcaCars)
setwd(C:\Users\Zhaohu\Documents\GitHub\pcaCars)
setwd("C:/Users/Zhaohu/AppData/Local/Temp/360zip$Temp/360$0")
setwd("C:/Users/Zhaohu/Documents/GitHub/pcaCars")
plot(pcaCars, type = "l")
plot(pcaCars)
ggplot(carsDf,aes(x=Comp.1, y=Comp.2)) +
geom_text_repel(aes(label = rownames(carsDf))) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = cluster), alpha = 0.55, size = 3) +
xlab("PC1") +
ylab("PC2") +
xlim(-5, 6) +
ggtitle("PCA plot of Cars")
carsHC <- hclust(dist(pcaCars$scores), method = "ward.D2")
plot(carsHC)
carsClusters <- cutree(carsHC, k = 3)
carsDf <- data.frame(pcaCars$scores, "cluster" = factor(carsClusters))
str(carsDf)
library(ggplot2)
library(ggrepel)
ggplot(carsDf,aes(x=Comp.1, y=Comp.2)) +
geom_text_repel(aes(label = rownames(carsDf))) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = cluster), alpha = 0.55, size = 3) +
xlab("PC1") +
ylab("PC2") +
xlim(-5, 6) +
ggtitle("PCA plot of Cars")
install.packages("ggrepel")
install.packages("ggplot2")
library(ggplot2)
library(ggrepel)
ggplot(carsDf,aes(x=Comp.1, y=Comp.2)) +
geom_text_repel(aes(label = rownames(carsDf))) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = cluster), alpha = 0.55, size = 3) +
xlab("PC1") +
ylab("PC2") +
xlim(-5, 6) +
ggtitle("PCA plot of Cars")
source('~/GitHub/pcaCars/pca.R')
source('~/GitHub/pcaCars/pca.R')
